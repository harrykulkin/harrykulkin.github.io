{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/ES2015-with-Webpack3-n-Babel7","result":{"data":{"markdownRemark":{"id":"cd9160b3-8e27-5da6-8969-2e717cadd2d7","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<ul>\n<li>순정 html, js 개발 환경에서는 ES2015+ 스타일의 import 구문 호환 안 됨 (Webpack3 필요)</li>\n<li>크롬, 파이어폭스, 엣지 등에서는 ES2015+ 기반 소스가 잘 구현되나, IE 에서는 호환이 안 됨 (Babel7 등 필요)</li>\n<li>기준 환경 : VSCode, Windows10 64bit</li>\n</ul>\n<h2 id=\"용어\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4\" aria-label=\"용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어</h2>\n<ul>\n<li>\n<p><strong>webpack</strong> : js, css 등 파일 꾸러미를 파일 하나의 bundle로 만들어줌</p>\n<ul>\n<li>ES2015+ 스타일로 import나 export를 쓰려면 webpack으로 bundle 파일을 떨궈줘야 브라우저에서 돌아감</li>\n</ul>\n</li>\n<li>\n<p><strong>polyfill</strong> : A라는 환경에서 안돌아가는 것을 가능케 해주는 웹 소스</p>\n<ul>\n<li>주로 구형 IE를 호환시키는 모듈을 통칭</li>\n</ul>\n</li>\n<li><strong>babel</strong> : ES2015+로 만든 소스를 ES2015이하로 변환해주는 일종의 compiler</li>\n</ul>\n<h2 id=\"webpack3-설정-방법\" style=\"position:relative;\"><a href=\"#webpack3-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"webpack3 설정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack3 설정 방법</h2>\n<ul>\n<li>\n<p>npm 사용하기 위한 nodejs 설치</p>\n<ul>\n<li>nodejs 윈도우 버전을 설치해도 되고 WSL2 환경을 구성한 후 apt를 활용해서 설치해도 됨 (후자 추천)</li>\n<li>\n<p>webpack 워크스페이스 폴더 및 리포지토리 생성 후 이동</p>\n<ul>\n<li>예시 : <code class=\"language-text\">~/webpack_workspace/sample_prj/</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>npm 초기 설정 및 webpack 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm init -y\nnpm  install webpack webpack-cli --save-dev\n// --save-dev 옵션은 프러덕션 빌드 시 제외하라는 것으로 개발 모드와 구분하지 않을 경우 생략해도 무방</code></pre></div>\n</li>\n<li>\n<p>package.json 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;private&quot;: true, // 추가\n&quot;main&quot;: &quot;index.js&quot;, // 제거</code></pre></div>\n</li>\n<li>\n<p>디렉토리를 소스(src)와 배포(dist)로 나눠서 관리토록 webpack.config.js 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const path = require(&#39;path&#39;);</code></pre></div>\n</li>\n</ul>\n<p>module.exports = {\nentry: ‘./src/common.js’,\noutput: {\nfilename: ‘main.js’,\npath: path.resolve(__dirname, ‘dist’),\n},\n};</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  - package.json에 npm script 등록</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;scripts&quot;: {\n  &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n  &quot;build&quot;: &quot;webpack --devtool source-map&quot; // 크롬 디버깅을 위한 옵션 추가\n},</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  - 명령어 실행 ```npm run build```\n  - **dist/bundle.js** 확인하고 html 파일 만들어서 &lt;script&gt; 태그가 bundle.js 를 참조하도록 함 ```&lt;script  src=&quot;bundle.js&quot;&gt;&lt;/script&gt;```\n  - 참조 : &lt;https://webpack.js.org/guides/getting-started/&gt;</code></pre></div>","fields":{"slug":"/posts/ES2015-with-Webpack3-n-Babel7","tagSlugs":["/tag/프론트엔드/"]},"frontmatter":{"date":"2020-08-06T17:15:00.000Z","description":"ES2015+ 스타일의 프론트엔드 개발 환경 구축","tags":["프론트엔드"],"title":"Webpack3 및 Babel7을 활용한 ES2015+ 기반 프론트엔드 개발환경 구축","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/ES2015-with-Webpack3-n-Babel7"}},"staticQueryHashes":["251939775","3942705351","401334301"]}